{"./":{"url":"./","title":"首页","keywords":"","body":"首页 首页介绍 "},"source/zh-cn/overview/":{"url":"source/zh-cn/overview/","title":"1. 平台概述","keywords":"","body":"1.1 平台介绍 1.2 接入流程介绍 1.3 联系我们 "},"source/zh-cn/overview/platform_introduction.html":{"url":"source/zh-cn/overview/platform_introduction.html","title":"1.1平台介绍","keywords":"","body":"1.1 平台介绍 这里是平台介绍 "},"source/zh-cn/overview/access_flow_introduction.html":{"url":"source/zh-cn/overview/access_flow_introduction.html","title":"1.2接入流程介绍","keywords":"","body":"1.2 接入流程介绍 这里是接入流程介绍 "},"source/zh-cn/overview/contact_us.html":{"url":"source/zh-cn/overview/contact_us.html","title":"1.3联系我们","keywords":"","body":"1.3 联系我们 这里是联系我们 "},"source/zh-cn/product/":{"url":"source/zh-cn/product/","title":"2. 产品开发","keywords":"","body":"2.1 创建产品 2.2 协议配置 2.3 页面配置 2.4 设备调试 2.5 接入方案 2.6 联网配置 2.7 固件升级 2.8 MAC管理 2.9 发布产品 2.10 品牌管理 "},"source/zh-cn/product/product.html":{"url":"source/zh-cn/product/product.html","title":"2.1 创建产品","keywords":"","body":"2.1 创建产品 这里是创建产品内容 "},"source/zh-cn/product/protocol_config.html":{"url":"source/zh-cn/product/protocol_config.html","title":"2.2 协议配置","keywords":"","body":"2.2 协议配置 这里是协议配置内容 "},"source/zh-cn/product/page_config.html":{"url":"source/zh-cn/product/page_config.html","title":"2.3 页面配置","keywords":"","body":"2.3 页面配置 这里是页面配置内容 "},"source/zh-cn/product/debugging.html":{"url":"source/zh-cn/product/debugging.html","title":"2.4 设备调试","keywords":"","body":"2.4 设备调试 这里是设备调试内容爱 "},"source/zh-cn/product/access_scheme.html":{"url":"source/zh-cn/product/access_scheme.html","title":"2.5 接入方案","keywords":"","body":"2.5 接入方案 这里是接入方案内容 "},"source/zh-cn/product/network_config.html":{"url":"source/zh-cn/product/network_config.html","title":"2.6 联网配置","keywords":"","body":"2.6 联网配置 这里是联网配置内容 "},"source/zh-cn/product/upgrade.html":{"url":"source/zh-cn/product/upgrade.html","title":"2.7 固件升级","keywords":"","body":"2.7 固件升级 这里是固件升级内容 "},"source/zh-cn/product/mac.html":{"url":"source/zh-cn/product/mac.html","title":"2.8 MAC管理","keywords":"","body":"2.8 MAC管理 这里是MAC管理内容 "},"source/zh-cn/product/publish_product.html":{"url":"source/zh-cn/product/publish_product.html","title":"2.9 发布产品","keywords":"","body":"2.9 发布产品 这里是发布产品内容 "},"source/zh-cn/product/brand.html":{"url":"source/zh-cn/product/brand.html","title":"2.10 品牌管理","keywords":"","body":"2.10 品牌管理 这里是品牌管理内容 "},"source/zh-cn/app/":{"url":"source/zh-cn/app/","title":"3. APP开发","keywords":"","body":"1.1 android SDK 1.2 iOS SDK 1.3 H5 SDK "},"source/zh-cn/app/application/application.html":{"url":"source/zh-cn/app/application/application.html","title":"3.1 应用管理","keywords":"","body":""},"source/zh-cn/app/SDK/":{"url":"source/zh-cn/app/SDK/","title":"3.2 APP SDK","keywords":"","body":""},"source/zh-cn/app/SDK/android.html":{"url":"source/zh-cn/app/SDK/android.html","title":"3.2.1 android SDK","keywords":"","body":""},"source/zh-cn/app/SDK/ios.html":{"url":"source/zh-cn/app/SDK/ios.html","title":"3.2.2 iOS SDK","keywords":"","body":"iOS SDK 概述 目录 0、 设备接入SDK概述 1、 SDK初始化 2、 SDK授权 3、 SDK第三方登录 4、 SDK蓝牙设备的扫描绑定 5、 SDK蓝牙设备的控制 6、 SDK WIFI设备的扫描绑定 7、 SDK WIFI设备的控制 8、 SDK 设备的分享 9、 SDK APP辅助信息接口 设备接入SDK概述 一. SDK功能简介 和而泰开放平台设备接入SDK封装了和而泰开放平台（以下简称开放平台）接口，以及手机与智能硬件通讯接口。包括用户模块，设备绑定模块，设备控制模块和其他的开放平台接口。开发者不需要关注这些模块的具体内部逻辑，只需要根据自己的业务需求编写界面和调用SDK接口就可以完成APP的快速开发, 二. SDK的总体框架 三. 相关名词定义 3.1 大循环 智能设备通过路由器或直接接入互联网以实现用户的远程监测与控制，我们称为大循环。 3.2 productId 设备产品号，设备在开放平台管理系统录入设备的时候，系统会根据设备录入的设备大类、设备小类、客户代码、DeviceKey、设备编码生成一个productId，可在开放平台管理系统上看到。 3.3 deviceId 设备号，当一个设备通过设备绑定的接口初次接入开放平台时，开放平台会自动根据productId以及设备的mac地址为此设备注册一个deviceId，此deviceId全网唯一，用于通过开放平台进行设备的操作。 "},"source/zh-cn/app/SDK/iOSSDK/iOS_init.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_init.html","title":"3.2.2.1 初始化","keywords":"","body":"初始化 一、集成准备 1、 注册开放平台账号 通过https://open.clife.cn/#/home注册一个开发者账号。登录到开放平台创建应用完善详细资料。此部分请参考《和而泰开发平台使用手册》。 二、下载C-Life iOS SDK文件，并且配置工程 1、确认本机安装的cocoapods能正常工作 pod --help 2、编辑工程对于的Podfile文件 platform :ios, '7.0' target :\"HETOpenPlatformSDKDemo\" do pod 'HETOpenSDK','0.1.1' end inhibit_all_warnings! 3、安装 以下两种方式任选一种就可以： 1.pod install --verbose --no-repo-update 2.pod update --verbose --no-repo-update 4、支持Http传输 NSAppTransportSecurity NSAllowsArbitraryLoads 三、导入硬件模组对应的SDK 1、根据产品类型找到对应的芯片模组名称，如下： 2、在podfile中导入对应的sdk，并且安装，对应类表如下： # TI-WiFi模组 pod 'HETPublicSDK_WiFiModule_TI_CC3200R2', '1.0.0' # 汉枫-WiFi模组 pod 'HETPublicSDK_WiFiModule_HF_LPT100_V3', '1.0.0' # 科中龙-WiFi模组 pod 'HETPublicSDK_WiFiModule_Realtek8711AF', '1.0.0' # 信驰达-WiFi模组 pod 'HETPublicSDK_WiFiModule_MTK7681', '1.0.0' # 信驰达-WiFi模组 pod 'HETPublicSDK_WiFiModule_MTK7687', '1.0.1' # 新力维-WiFi模组 pod 'HETPublicSDK_WiFiModule_NL6621', '1.0.0' # 乐鑫-WiFi模组 pod 'HETPublicSDK_WiFiModule_ESP8266', '1.0.0' # COOEE-WiFi模组 pod 'HETPublicSDK_WiFiModule_COOEE', '1.0.0' # MarvellV2-WiFi模组 pod 'HETPublicSDK_WiFiModule_Marvell_MW300_V2', '1.0.0' 三、注册使用SDK 1、在AppDelegate 中如下地方添加，注册使用SDK，打开Log - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // 1.注册HET开发平台SDK [HETOpenSDK registerAppId:@\"yourAPPId\" appSecret:@\"yourAPPSecret\"]; [HETOpenSDK openLog:NO]; return YES; } yourAPPId、yourAPPSecret的值是在“应用创建”时生成的AppID、AppSecret。 在如下图查看: 注意:如果网络请求出现AppID不合法，请检查Xcode工程里面的BundleId和appId，必须跟在开放平台创建应用时填的BundleId和AppID保持一致。 "},"source/zh-cn/app/SDK/iOSSDK/iOS_Auth.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_Auth.html","title":"3.2.2.2 SDK授权","keywords":"","body":"授权登录 参考HETAuthorize类里面方法,调用authorizeWithCompleted接口会弹出授权登录的界面，登录成功后接口返回openId（授权用户唯一标识）可用于与自己平台的账户体系关联。 1、授权登录 /** * 是否授权认证 * * @return YES为已经授权登录 */ - (BOOL)isAuthenticated; /** * 授权认证 * * @param completedBlock 授权认证回调 */ - (void)authorizeWithCompleted:(authenticationCompletedBlock)completedBlock; 【示例代码】 HETAuthorize *auth = [[HETAuthorize alloc] init]; self.auth = auth; if (![self.auth isAuthenticated]) { [auth authorizeWithCompleted:^(HETAccount *account, NSError *error) { }]; } 2、取消授权登录，退出当前账号 /** * 取消授权认证 */ - (void)unauthorize; 3、获取用户信息 /** *获取用户信息 * * @param success 获取用户信息成功的回调 * @param failure 获取用户信息失败的回调 */ -(void)getUserInformationSuccess:(successBlock)success failure:(failureBlock)failure; 接口返回的结果数据 { \"code\":0, \"data\":{ \"userId\": \"d09f572c60ffced144d6cfc55a6881b9\", \"userName\": \"葫芦娃\", \"email\":\"\", \"phone\":\"\", \"sex\": 1, \"birthday\": \"2014-12-31\", \"weight\": 48000, \"height\": 163, \"avatar\": \"\", \"city\": \"深圳\" } } 4、异地登录、accessToken过期 通知 开放平台的账号只能在一台设备上面登录。当有账号在另一台设备登录时，SDK会抛出一个HETLoginOffNotification消息。 开发者可以在首页监听这个消息，处理异地登录的逻辑。 例： [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(XXX) name:HETLoginOffNotification object: nil]; "},"source/zh-cn/app/SDK/iOSSDK/iOS_third_login.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_third_login.html","title":"3.2.2.3 SDK第三方登录","keywords":"","body":"第三方登录 一、申请各个平台的App key和App secret 注意：app bundleId跟各平台注册的时候一致。 二、通过Pod导入SDK： pod 'WechatOpenSDK', '1.7.7' pod 'WeiboSDK', '3.1.3' pod 'TencentOpenApiSDK', '2.9.5' 三、项目配置 1、URLScheme 配置： 2、针对iOS9以后，需要添加白名单。 在info.plist文件中加入 LSApplicationQueriesSchemes LSApplicationQueriesSchemes wechat weixin sinaweibohd sinaweibo sinaweibosso weibosdk weibosdk2.5 mqqapi mqq mqqOpensdkSSoLogin mqqconnect mqqopensdkdataline mqqopensdkgrouptribeshare mqqopensdkfriend mqqopensdkapi mqqopensdkapiV2 mqqopensdkapiV3 mqzoneopensdk wtloginmqq wtloginmqq2 mqqwpa mqzone mqzonev2 mqzoneshare wtloginqzone mqzonewx mqzoneopensdkapiV2 mqzoneopensdkapi19 mqzoneopensdkapi mqzoneopensdk 3、针对iOS9默认使用https,现在先还原成http请求方式。 在Info.plist中添加NSAppTransportSecurity类型Dictionary。 在NSAppTransportSecurity下添加NSAllowsArbitraryLoads类型Boolean,值设为YES 第一步：在plist中添加NSAppTransportSecurity项，此项为NSDictionary 第二步：在NSAppTransportSecurity下添加 NSAllowsArbitraryLoads类型为Boolean，value为YES 四、接入HETOpenSDK 第三方登录 1. 在刚刚新建的项目中 appdelegate.m， 添加代码： a、注入appkey [HETOpenSDK setPlaform:HETAuthPlatformType_QQ appKey:QQ_APP_ID appSecret:nil redirectURL:nil]; [HETOpenSDK setPlaform:HETAuthPlatformType_Weibo appKey:WB_APP_KEY appSecret:nil redirectURL:nil]; [HETOpenSDK setPlaform:HETAuthPlatformType_Wechat appKey:WX_APP_KEY appSecret:WX_APP_SECRET redirectURL:nil]; b、在添加跳转的请求方法 ``` - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation { BOOL result = [HETOpenSDK application:application openURL:url sourceApplication:sourceApplication annotation:annotation]; return result; } - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { BOOL result = [HETOpenSDK handleOpenURL:url]; return result; } `` "},"source/zh-cn/app/SDK/iOSSDK/iOS_BLE_Scan_Bind.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_BLE_Scan_Bind.html","title":"3.2.2.4 SDK蓝牙设备的扫描绑定","keywords":"","body":"蓝牙扫描绑定 蓝牙的扫描绑定主要看HETBLEBusiness相关接口 一、扫描二维码绑定 扫描二维码绑定，即用户扫描设备的二维码来绑定设备的方式。 1、获取设备类型、确定设备绑定方式 通过扫一扫获取产品ID productId 根据 产品ID 获取设备信息 根据设备信息区分设备类型、设备绑定方式 a、获取产品ID 扫一扫内容： urlStr: http://open.clife.net/v1/web/open/product?param={\"a\":3531} \"a\":3531 3531 即是 产品ID b、根据 产品ID 获取设备信息 /** * 根据productId获取产品的详细信息 * * @param productId 设备型号标识 * @param success 查询设备信息成功的回调 * @param failure 查询设备信息失败的回调 */ +(void)fetchDeviceInfoWithProductId:(NSNumber *)productId success:(successBlock)success failure:(failureBlock)failure; penPlatform/文档/image/产品详细信息.jpg) 根据设备信息中的 moduleType 来区分设备类型 moduleType 绑定类型 1 wifi设备 2 蓝牙设备 根据 moduleId 再区分wifi设备的绑定方式(AP绑定和smartLink绑定) moduleId | 绑定类型 ------------- |------------- 70 |AP绑定 其他 |smartLink绑定 蓝牙设备只有一种绑定方式（蓝牙绑定） c、初始化HETBLEBusiness对象，启动绑定流程 //初始化蓝牙设备的业务类，需要设备的productId，deviceTypeId，deviceSubtypeId self.bleBusiness=[[HETBLEBusiness alloc] initWithProductId:self.productId.integerValue deviceTypeId:self.deviceTypeId.integerValue deviceSubtypeId:self.deviceSubtypeId.integerValue]; 扫描蓝牙设备,扫描到的蓝牙设备，用tableView显示出来，给用户选择。 WEAKSELF [self.bleBusiness scanForPeripheralsWithTimeOut:timeOut name:nil mac:nil scanForPeripheralsBlock:^(NSArray *peripherals, NSError *error) { if (error) { [weakSelf scanDeviceFail]; return ; } if (peripherals) { OPLog(@\"peripherals = %@\",peripherals); OPLog(@\"[NSThread currentThread] = %@\",[NSThread currentThread]); [peripherals enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) { CBPeripheral *dev = (CBPeripheral*)obj; if (![weakSelf.deviceArr containsObject:dev]) { [weakSelf.deviceArr addObject:dev]; } [UIView animateWithDuration:2 animations:^{ [weakSelf.bindAnimationView stopSearchProgressing]; weakSelf.bindAnimationView.hidden = YES; } completion:^(BOOL finished) { [weakSelf.tableView reloadData]; weakSelf.tableView.hidden = NO; }]; }]; return; } }]; d、绑定设备 选择需要绑定的设备，启动绑定流程。 [self.bleBusiness bindBleDeviceWithPeripheral:cbp macAddress:nil completionHandler:^(NSString *deviceId, NSError *error) { [weakself.bleBusiness disconnectWithPeripheral:cbp]; if(error) { [HETCommonHelp showAutoDissmissWithMessage:@\"绑定失败\"]; [weakself.navigationController popViewControllerAnimated:YES]; } else { [weakself.bindAnimationView startBindsuccess]; [[NSNotificationCenter defaultCenter] postNotificationName:BindDeviceSuccess object:nil]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ [weakself.navigationController popToRootViewControllerAnimated:YES]; }); } }]; 二、手动绑定 获取设备大类列表 (获取deviceTypeId) 获取设备小类列表（支持的设备列表,其中含有productId,deviceSubtypeId） 传入参数productId，deviceTypeId，deviceSubtypeId，启动绑定流程 a、获取设备大类列表 在 HETDeviceRequestBusiness 查询设备信息获取相关接口 /** * 查询设备大类 * * @param success 成功的回调 * @param failure 失败的回调 */ + (void)fetchDeviceTypeListSuccess:(successBlock)success failure:(failureBlock)failure; b、通过大类ID，获取设备小类 /** * 根据设备大类查询APP支持的设备型号 * * @param success 成功的回调 * @param failure 失败的回调 */ + (void)fetchDeviceProductListWithDeviceTypeId:(NSString *)deviceTypeId success:(successBlock)success failure:(failureBlock)failure; c、初始化HETBLEBusiness对象，启动绑定流程 //初始化蓝牙设备的业务类，需要设备的productId，deviceTypeId，deviceSubtypeId self.bleBusiness=[[HETBLEBusiness alloc] initWithProductId:self.productId.integerValue deviceTypeId:self.deviceTypeId.integerValue deviceSubtypeId:self.deviceSubtypeId.integerValue]; 扫描蓝牙设备,扫描到的蓝牙设备，用tableView显示出来，给用户选择。 WEAKSELF [self.bleBusiness scanForPeripheralsWithTimeOut:timeOut name:nil mac:nil scanForPeripheralsBlock:^(NSArray *peripherals, NSError *error) { if (error) { [weakSelf scanDeviceFail]; return ; } if (peripherals) { OPLog(@\"peripherals = %@\",peripherals); OPLog(@\"[NSThread currentThread] = %@\",[NSThread currentThread]); [peripherals enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) { CBPeripheral *dev = (CBPeripheral*)obj; if (![weakSelf.deviceArr containsObject:dev]) { [weakSelf.deviceArr addObject:dev]; } [UIView animateWithDuration:2 animations:^{ [weakSelf.bindAnimationView stopSearchProgressing]; weakSelf.bindAnimationView.hidden = YES; } completion:^(BOOL finished) { [weakSelf.tableView reloadData]; weakSelf.tableView.hidden = NO; }]; }]; return; } }]; d、绑定设备 选择需要绑定的设备，启动绑定流程。 [self.bleBusiness bindBleDeviceWithPeripheral:cbp macAddress:nil completionHandler:^(NSString *deviceId, NSError *error) { [weakself.bleBusiness disconnectWithPeripheral:cbp]; if(error) { [HETCommonHelp showAutoDissmissWithMessage:@\"绑定失败\"]; [weakself.navigationController popViewControllerAnimated:YES]; } else { [weakself.bindAnimationView startBindsuccess]; [[NSNotificationCenter defaultCenter] postNotificationName:BindDeviceSuccess object:nil]; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ [weakself.navigationController popToRootViewControllerAnimated:YES]; }); } }]; "},"source/zh-cn/app/SDK/iOSSDK/iOS_Device_Share.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_Device_Share.html","title":"3.2.2.5 SDK蓝牙设备的控制","keywords":"","body":"IOS 设备分享 C-Life设备分享分为面对面分享和第三方应用分享,分享相关接口请参考HETDeviceShareBusiness 一、分享流程 面对面分享： A用户打开APP设备面对面分享产生一个分享二维码， B用户打开APP的扫一扫，直接获取设备的控制权限。 第三方应用分享： A用户打开APP设备第三方应用分享（微信，QQ），例如分享到微信好友， B用户识别微信中的二维码，打开分享网页，尝试打开APP成功即获取设备的控制权限，失败就提示用户B下载APP。 注意： 1、URL scheme 第三方分享需要APP提供URL scheme，方便web页面打开APP，并且传递分享码给APP。 2、分享码有效期 面对面分享码有效期为10分钟 第三方分享码有效期为一个小时 二、面对面分享 第一步：请求分享码，并生成分享二维码 第二步：验证分享码，获取设备权限 三、第三方应用分享 第一步：请求分享连接，分享到第三方应用 第二步：第三方应用打开连接，web页面尝试打开APP 第二步：验证分享码，获取设备权限 四、接口说明 1、分享 1.1、获取设备分享码 /** * 获取分享码 * * @param deviceId 分享的设备（加密的） * @param shareType 分享方式 （5 -面对面；6-远程分享） * @param success 成功的回调 * @param failure 失败的回调 */ +(void)getShareCodeWithDeviceId:(NSString *)deviceId shareType:(HETDeviceShareType)shareType success:(successBlock)success failure:(failureBlock)failure 参数说明 参数名称 是否必须 字段类型 参数说明 deviceId 是 NSString 设备ID shareType 是 HETDeviceShareType 分享类型 1.2、授权分享 /** * 授权分享 * * @param shareCode 分享码 * @param shareType 分享方式 （5 -面对面；6-远程分享） * @param success 成功的回调 * @param failure 失败的回调 */ +(void)authShareDeviceWithShareCode:(NSString *)shareCode shareType:(HETDeviceShareType)shareType success:(successBlock)success failure:(failureBlock)failure 参数说明 参数名称 是否必须 字段类型 参数说明 shareCode 是 NSString 设备分享码 shareType 是 HETDeviceShareType 分享类型 2.获取设备授权的用户列表 [HETDeviceShareBusiness deviceGetAuthUserWithDeviceId:self.deviceId success:^(id responseObject) { [weakSelf.shareUserTableView.mj_header endRefreshing]; OPLog(@\"responseObject == %@\",responseObject); if ([responseObject isKindOfClass:[NSArray class]]) { weakSelf.shareUserArr = [responseObject mutableCopy]; [weakSelf.shareUserTableView reloadData]; } } failure:^(NSError *error) { OPLog(@\"error == %@\",error); [HETCommonHelp showHudAutoHidenWithMessage:PuLLDownRefresh]; [weakSelf.shareUserTableView.mj_header endRefreshing]; }]; 3.用户设备授权删除 WEAKSELF [HETDeviceShareBusiness deviceAuthDelWithDeviceId:self.deviceId userId:userId success:^(id responseObject) { // 删除数据源的数据,self.cellData是你自己的数据 [weakSelf.shareUserArr removeObjectAtIndex:indexPath.row]; // 删除列表中数据 [weakSelf.shareUserTableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade]; [weakSelf getShareUserList]; [HETCommonHelp showHudAutoHidenWithMessage:@\"删除成功\"]; } failure:^(NSError *error) { [HETCommonHelp showHudAutoHidenWithMessage:@\"删除失败\"]; [weakSelf.shareUserTableView endEditing:YES]; }]; "},"source/zh-cn/app/SDK/iOSSDK/iOS_WIFI_Scan.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_WIFI_Scan.html","title":"3.2.2.6 SDK WIFI设备的扫描绑定","keywords":"","body":"wifi - 设备绑定 设备绑定概述 开放平台的设备按照功能划分类型，设备有大类，大类下面划分不同型号的小类。确定类型之后，设备还有WIFI和蓝牙设备之分。绑定设备之前首先就需要选择设备类型在扫描绑定。WIFI SSID和密码 需要开发者自己去获取手机当前连接的WIFI，让用户自己输入WIFI密码之后再调用开始扫描绑定的接口，productId是设备小类中productId字段。 设备绑定分为手动绑定和二维码扫描绑定，流程如下： 一、扫描二维码绑定 1、获取设备类型、确定设备绑定方式 通过扫一扫获取产品ID productId 根据 产品ID 获取设备信息 根据设备信息区分设备类型、设备绑定方式 a、获取产品ID 扫一扫内容： urlStr: http://open.clife.net/v1/web/open/product?param={\"a\":3531} \"a\":3531 3531 即是 产品ID b、根据 产品ID 获取设备信息 /** * 根据productId获取产品的详细信息 * * @param productId 设备型号标识 * @param success 查询设备信息成功的回调 * @param failure 查询设备信息失败的回调 */ +(void)fetchDeviceInfoWithProductId:(NSNumber *)productId success:(successBlock)success failure:(failureBlock)failure; 根据设备信息中的 moduleType 来区分设备类型 moduleType 绑定类型 1 wifi设备 2 蓝牙设备 根据 moduleId 再区分wifi设备的绑定方式(AP绑定和smartLink绑定) moduleId | 绑定类型 ------------- |------------- 70 |AP绑定 其他 |smartLink绑定 蓝牙设备暂时只有一种绑定方式（蓝牙绑定） 2、wifi 绑定 2.1 wifi smartLink绑定 在开始配置前，设备要先进入配置模式，然后APP发送要配置的路由器ssid和密码,开启扫描设备服务将扫描到的设备进行绑定，获取绑定结果回调。 第一步：获取路由器ssid和密码 第二步：传入参数产品ID productId，路由器ssid 和 密码，启动绑定流程 a、通过 HETWIFIBindBusiness 获取路由器ssid /** * 获得所连Wi-Fi的Mac地址 * * @return 返回mac地址 */ -(NSString *)fetchmacSSIDInfo; b、传入参数，通过 HETWIFIBindBusiness 调用接口， 启动绑定 /** * 绑定SmartLink模式WiFi设备 * * @param productId 设备的productId * @param ssid 设备所需要接入的路由器名称 * @param password 设备所需要接入的路由器密码 * @param interval 绑定的超时时间,单位是秒 * @param handler 绑定的回调 */ -(void)startSmartLinkBindDeviceWithProductId:(NSString *)productId withSSID:(NSString *)ssid withPassWord:(NSString *)password withTimeOut:(NSTimeInterval)interval bindHandler:(void (^)(HETWiFiDeviceBindState state,HETDevice *deviceObj, NSError *error))handler; 2.2 wifi AP绑定 在开始配置前，设备进入配置模式后，会产生一个Wifi热点。手机连接设备热点，将发送要配置的路由器ssid和密码给设备，然后APP将配置信息给设备，之后设备自行于服务器绑定，APP想服务器查询绑定状态。 使用C-life提供的模组固件，设备产生的Wifi热点以“HET-xxx”开头，没有密码。其他厂商提供的模组，SoftAP热点名称由各自厂商指定。 AP绑定的交互流程： 获取路由器ssid和密码 手机连接路由器热点 手机切换设备热点 传入参数 产品ID productId、设备大类ID、设备小类ID、路由器ssid 和 密码，启动绑定流程 a、传入参数，通过 HETWIFIBindBusiness 调用接口， 启动绑定 /** * 绑定AP模式的WiFi设备 * * @param productId 设备型号标识 * @param deviceTypeId 设备的大类 * @param deviceSubtypeId 设备的小类 * @param ssid AP设备所需要接入的路由器名称 * @param password AP设备所需要接入的路由器密码 * @param interval 绑定的超时时间,单位是秒 * @param handler 绑定的回调 */ -(void)startAPBindDeviceWithProductId:(NSString *)productId withDeviceTypeId:(NSUInteger)deviceTypeId withDeviceSubtypeId:(NSUInteger )deviceSubtypeId withSSID:(NSString *)ssid withPassWord:(NSString *)password withTimeOut:(NSTimeInterval)interval bindHandler:(void (^)(HETWiFiDeviceBindState state,HETDevice *deviceObj, NSError *error))handler; 二、手动绑定 1. smartLink 绑定 获取设备大类列表 (获取deviceTypeId) 获取设备小类列表（支持的设备列表,其中含有productId） 获取路由器ssid和密码 传入参数 产品ID productId、路由器ssid 和 密码，启动绑定流程 a、获取设备大类列表 在 HETDeviceRequestBusiness 查询设备信息获取相关接口 /** * 查询设备大类 * * @param success 成功的回调 * @param failure 失败的回调 */ + (void)fetchDeviceTypeListSuccess:(successBlock)success failure:(failureBlock)failure; b、通过大类ID，获取设备小类 /** * 根据设备大类查询APP支持的设备型号 * * @param success 成功的回调 * @param failure 失败的回调 */ + (void)fetchDeviceProductListWithDeviceTypeId:(NSString *)deviceTypeId success:(successBlock)success failure:(failureBlock)failure; c、通过 HETWIFIBindBusiness 获取路由器ssid /** * 获得所连Wi-Fi的Mac地址 * * @return 返回mac地址 */ -(NSString *)fetchmacSSIDInfo; d、传入参数，通过 HETWIFIBindBusiness 调用接口， 启动绑定 /** * 绑定SmartLink模式WiFi设备 * * @param productId 设备的productId * @param ssid 设备所需要接入的路由器名称 * @param password 设备所需要接入的路由器密码 * @param interval 绑定的超时时间,单位是秒 * @param handler 绑定的回调 */ -(void)startSmartLinkBindDeviceWithProductId:(NSString *)productId withSSID:(NSString *)ssid withPassWord:(NSString *)password withTimeOut:(NSTimeInterval)interval bindHandler:(void (^)(HETWiFiDeviceBindState state,HETDevice *deviceObj, NSError *error))handler; 2. AP 绑定 获取设备大类列表 (获取deviceTypeId) 获取设备小类列表（支持的设备列表,其中含有productId） 获取路由器ssid和密码 引导用户跳转到wifi连接页面，连接设备，待用户连接成功后，返回绑定页面 传入参数 产品ID productId、设备大类ID、设备小类ID、路由器ssid 和 密码，启动绑定流程 a、校验用户是否连接设备 设备AP热点命名规则： radiocastName_deviceTypeId_deviceSubtypeId 当判断用户已经成功连接设备AP热点，即可进入绑定流程。 b、传入参数，通过 HETWIFIBindBusiness 调用接口， 启动绑定 /** * 绑定AP模式的WiFi设备 * * @param productId 设备型号标识 * @param deviceTypeId 设备的大类 * @param deviceSubtypeId 设备的小类 * @param ssid AP设备所需要接入的路由器名称 * @param password AP设备所需要接入的路由器密码 * @param interval 绑定的超时时间,单位是秒 * @param handler 绑定的回调 */ -(void)startAPBindDeviceWithProductId:(NSString *)productId withDeviceTypeId:(NSUInteger)deviceTypeId withDeviceSubtypeId:(NSUInteger )deviceSubtypeId withSSID:(NSString *)ssid withPassWord:(NSString *)password withTimeOut:(NSTimeInterval)interval bindHandler:(void (^)(HETWiFiDeviceBindState state,HETDevice *deviceObj, NSError *error))handler; 绑定无法绑定？这里给出设备无法绑定的几种检查方法： 设备是否置为绑定模式，是否在绑定的有效时间内 是否正确输入wifi密码,请确认手机是否能正常连接网络 是扫描不到设备还是绑定不了设备,扫描失败会有对应提示是扫描不到设备，还是绑定不了设备 设备是否已在CLife开放平台注册，并按照要求将大小类信息写入设备中 "},"source/zh-cn/app/SDK/iOSSDK/iOS_WIFI_Controller.html":{"url":"source/zh-cn/app/SDK/iOSSDK/iOS_WIFI_Controller.html","title":"3.2.2.7 SDK WIFI设备的控制","keywords":"","body":"Wifi - 设备控制 参考HETDeviceControlBusiness类里面方法，实现设备控制和运行状态的监听。 参考HETDeviceRequestBusiness类里面的方法，获取设备的信息。 控制设备的流程如下：第一步：获取已绑定的设备列表，获取设备信息（HETDevice）。 第二步：根据获取的设备信息，监听设备状态，控制设备。 一、获取绑定设备列表 绑定成功后，用户可以获取绑定成功的设备列表，获取到设备列表拿到设备的HETDevice设备信息才可以控制设备 /** * 查询绑定的所有设备列表 * * @param success 设备列表返回HETDevice对象数组 * @param failure 失败的回调 */ + (void)fetchAllBindDeviceSuccess:(void (^)(NSArray* deviceArray))success failure:(failureBlock)failure; 二、监听设备状态 1、初始化 初始化HETDeviceControlBusiness的实例对象，传递需要监听的设备信息作为参数，监听block的回调信息，做相应的业务逻辑。对于运行数据、控制数据、错误数据的内容，请参考具体设备的配置协议内容。 - (HETDeviceControlBusiness *)controlBusiness { if (!_controlBusiness) { WEAKSELF _controlBusiness = [[HETDeviceControlBusiness alloc]initWithHetDeviceModel:self.device deviceRunData:^(id responseObject) { // 监听设备运行数据，responseObject请具体参考协议配置。 OPLog(@\"deviceRunData:%@ \" ,responseObject); } deviceCfgData:^(id responseObject) { // 监听设备控制数据 OPLog(@\"deviceCfgData:%@ \" ,responseObject); } deviceErrorData:^(id responseObject) { // 监听设备错误数据 OPLog(@\"deviceErrorData:%@ \" ,responseObject); } deviceState:^(HETWiFiDeviceState state) { // 监听设备在线状态数据 OPLog(@\"deviceState:%ld \" ,(long)state); //deviceState:2 }]; } return _controlBusiness; } 2、启动监听服务 - (void)viewWillAppear:(BOOL)animated { [self.controlBusiness start]; } 3、停止监听服务 - (void)viewWillDisappear:(BOOL)animated { [self.controlBusiness stop]; } 三、设备控制 设备控制流程入下： /** * 设备控制 * * @param jsonString 设备控制的json字符串,协议中的控制数据协议里面的字节属性名和对应值组成的字典经转换为json字符串,下发数据必须传递updateflag标志 * @param successBlock 控制成功的回调 * @param failureBlock 控制失败的回调 */ - (void)deviceControlRequestWithJson:(NSString *)jsonString withSuccessBlock:(void(^)(id responseObject))successBlock withFailBlock:(void(^)( NSError *error))failureBlock; 关于updateflag 这个修改标记位是为了做统计和配置下发的时候设备执行相应的功能。下发数据必须传递updateflag标志 例如，空气净化器（广磊K180）配置信息协议： 紫外线(1)、负离子(2)、臭氧(3)、儿童锁(4)、开关(5)、WiFi(6)、过滤网(7)、模式(8)、定时(9)、风量(10) 上面一共上10个功能，那么updateFlag就2个字节，没超过8个功能为1个字节，超过8个为2个字节，超过16个为3个字节，以此类推。 打开负离子，2个字节，每一个bit的值为下： 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 四：设备管理 1、解绑设备 设备删除有2中情况,需要自己根据设备分享类型（device.share）来区分： 第一种：设备是用户自己绑定的设备。调用unbindDeviceWithDeviceId: success: failure:来解除绑定。 /** * 解除设备绑定 * * @param deviceId 设备deviceId * @param success 成功的回调 * @param failure 失败的回调 */ [HETDeviceRequestBusiness unbindDeviceWithDeviceId:device.deviceId success:^(id responseObject) { // 删除数据源的数据,self.cellData是你自己的数据 [weakSelf.deviceArr removeObjectAtIndex:indexPath.row]; // 删除列表中数据 [weakSelf.deviceListTableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade]; } failure:^(NSError *error) { }]; 第二种：设备是别人分享的过来的设备。调用HetDeviceShareApi.getInstance().deviceDel()方法来解绑分享关系。 [HETDeviceShareBusiness deviceAuthDelWithDeviceId:device.deviceId userId:@\"\" success:^(id responseObject) { // 删除数据源的数据,self.cellData是你自己的数据 [weakSelf.deviceArr removeObjectAtIndex:indexPath.row]; // 删除列表中数据 [weakSelf.deviceListTableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade]; [weakSelf getDeviceList]; [HETCommonHelp showHudAutoHidenWithMessage:UnBindDeviceSuccess]; } failure:^(NSError *error) { [HETCommonHelp showHudAutoHidenWithMessage:UnBindDeviceError]; [weakSelf.deviceListTableView endEditing:YES]; }]; 2、修改设备信息 修改设备信息，用户可以修改设备的名称 /** * 修改设备基础信息 * * @param deviceId 设备标识 * @param deviceName 设备名称 * @param roomId 房间标识（绑定者才可以修改房间位置） * @param success 成功的回调 * @param failure 失败的回调 */ - (void)updateDeviceInfoWithDeviceId:(NSString *)deviceId deviceName:(NSString *)deviceName roomId:(NSString *)roomId success:(successBlock)success failure:(failureBlock)failure; "},"source/zh-cn/app/SDK/H5.html":{"url":"source/zh-cn/app/SDK/H5.html","title":"3.2.3 H5 SDK","keywords":"","body":"hetsdk说明文档 目录 项目开发及发布规范 项目开发 项目发布 项目开发 项目开发目录(推荐) + page // app设备html文件 + index.html + src // 工程源文件，代码编写在此目录进行 + css + js + static // 构建完成的工程文件，请勿直接编辑 + css + img + js + vm // 用于模拟app环境的虚拟器 项目开发注意细节 1.使用sdk开发时请登记repaint方法的回调函数,否则将无法获取app推送过来的数据。 2.向app发送数据时请携带updateFlag参数，并正确计算，否则可能导致下发指令失败。 3.sdk约定app推送过来的数据type=0为控制数据，type=1为运行数据。 项目发布 项目文件发布 项目发布目录结构 page // app设备html文件 index.html(必须) static // 构建完成的工程文件，请勿直接编辑 css img js 文件后缀 为便于sdk识别,项目文件需打包放在一个zix压缩包内,如test.zix "},"source/zh-cn/device/":{"url":"source/zh-cn/device/","title":"4. 硬件开发","keywords":"","body":""},"source/zh-cn/cloudAPI/":{"url":"source/zh-cn/cloudAPI/","title":"5. 云API","keywords":"","body":""},"source/zh-cn/dataservice/":{"url":"source/zh-cn/dataservice/","title":"6. 数据服务","keywords":"","body":""}}